// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var construct, Identifier, LabeledStatement, Node, Statement;
  Node = require('../node');
  Statement = require('../classes/Statement');
  Identifier = require('./Identifier');
  construct = require('../combinators').construct;
  LabeledStatement = function (super$) {
    extends$(LabeledStatement, super$);
    LabeledStatement.prototype.type = LabeledStatement.name;
    function LabeledStatement(depth) {
      --depth;
      this.label = Identifier(depth);
      this.body = Statement(depth);
    }
    return LabeledStatement;
  }(Node);
  module.exports = construct(LabeledStatement);
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
  function extends$(child, parent) {
    for (var key in parent)
      if (isOwn$(parent, key))
        child[key] = parent[key];
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }
}.call(this);
