// Generated by CoffeeScript 2.0.0-beta5
void function () {
  var cache$, eq, Expression, FunctionExpression, Getter, Identifier, IdentifierName, Key, leaf, listOf, nubBy, Number_, oneOf, Property, propName, Setter, String_, TYPE;
  Expression = require('../classes/Expression');
  FunctionExpression = require('./FunctionExpression');
  IdentifierName = require('./IdentifierName');
  Identifier = require('./Identifier');
  Number_ = require('./Number');
  String_ = require('./String');
  cache$ = require('../combinators');
  oneOf = cache$.oneOf;
  listOf = cache$.listOf;
  TYPE = 'ObjectExpression';
  leaf = function (depth) {
    return {
      type: TYPE,
      properties: []
    };
  };
  nubBy = function (xs, eq) {
    return function (accum$) {
      var x;
      for (var i$ = 0, length$ = xs.length; i$ < length$; ++i$) {
        x = xs[i$];
        if (!!function (accum$1) {
            var y;
            for (var i$1 = 0, length$1 = xs.length; i$1 < length$1; ++i$1) {
              y = xs[i$1];
              if (!eq(x, y))
                continue;
              accum$1.push(y);
            }
            return accum$1;
          }.call(this, []).length)
          continue;
        accum$.push(x);
      }
      return accum$;
    }.call(this, []);
  };
  propName = function (node) {
    switch (node.type) {
    case 'Literal':
      return '' + node.value;
    case 'Identifier':
      return node.name;
    }
  };
  eq = function (x, y) {
    return propName(x) === propName(y) && (x.kind === y.kind && (x.kind === 'get' || x.kind === 'set') || x.kind === 'init' && (y.kind === 'get' || y.kind === 'set') || y.kind === 'init' && (x.kind === 'get' || x.kind === 'set'));
  };
  Key = function (args) {
    var cache$1;
    args = 1 <= arguments.length ? [].slice.call(arguments, 0) : [];
    return (cache$1 = oneOf([
      String_,
      Number_,
      IdentifierName
    ])).apply(cache$1, [].slice.call(args).concat());
  };
  Property = function (depth) {
    return {
      kind: 'init',
      key: Key(depth),
      value: Expression(depth)
    };
  };
  Getter = function (depth) {
    var fn;
    fn = FunctionExpression(depth);
    fn.params.length = 0;
    return {
      kind: 'get',
      key: Key(depth),
      value: fn
    };
  };
  Setter = function (depth) {
    var fn;
    fn = FunctionExpression(depth);
    fn.params = [Identifier(depth)];
    return {
      kind: 'set',
      key: Key(depth),
      value: fn
    };
  };
  module.exports = function (depth) {
    --depth;
    return {
      type: TYPE,
      properties: nubBy(listOf([
        Property,
        Getter,
        Setter
      ])(depth), eq)
    };
  };
}.call(this);
