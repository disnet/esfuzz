// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var cache$, Node, Number_, randomElement, randomInt;
  Node = require('../node');
  cache$ = require('../random');
  randomInt = cache$.randomInt;
  randomElement = cache$.randomElement;
  Number_ = function (super$) {
    extends$(Number_, super$);
    Number_.prototype.type = 'Literal';
    function Number_() {
      var int;
      switch (randomInt(6)) {
      case 0:
        this.value = 0;
        break;
      case 1:
        this.value = 0;
        this.raw = '0.';
        break;
      case 2:
        this.value = 0;
        this.raw = '.0';
        break;
      default: {
          int = randomInt(Math.pow(2, 53) - 1);
          this.value = int;
          switch (randomInt(10)) {
          case 0:
            this.raw = '' + randomElement([
              '0',
              '00',
              '000',
              '0000'
            ]) + int.toString(8);
            break;
          case 1:
            this.raw = '0' + randomElement([
              'x',
              'X'
            ]) + int.toString(16);
          }
        }
      }
    }
    return Number_;
  }(Node);
  module.exports = function () {
    return new Number_;
  };
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
  function extends$(child, parent) {
    for (var key in parent)
      if (isOwn$(parent, key))
        child[key] = parent[key];
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }
}.call(this);
