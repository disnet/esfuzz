// Generated by CoffeeScript 2.0.0-beta5
void function () {
  var Alternation, cache$, Character, CharacterClass, charVal, genSafeRegExp, Grouping, listOf, oneOf, printableAscii, randomInt, RegExpSource, Repetition, Sequence, TYPE;
  cache$ = require('../combinators');
  oneOf = cache$.oneOf;
  listOf = cache$.listOf;
  randomInt = require('../random').randomInt;
  TYPE = 'Literal';
  printableAscii = function () {
    return String.fromCharCode(32 + randomInt(94));
  };
  charVal = function (str) {
    if (str[0] === '\\') {
      switch (str[1]) {
      case 'u':
      case 'x':
        return parseInt(str.slice(2), 16);
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
        return parseInt(str.slice(1), 8);
      case 'b':
        return 8;
      case 't':
        return 9;
      case 'n':
        return 10;
      case 'v':
        return 11;
      case 'f':
        return 12;
      case 'r':
        return 13;
      default:
        return str.charCodeAt(1);
      }
    } else {
      return str.charCodeAt(0);
    }
  };
  Alternation = function (depth) {
    if (!depth--)
      return '';
    return listOf([
      Grouping,
      CharacterClass,
      Repetition,
      Sequence
    ])(depth).join('|');
  };
  Character = function () {
    var ch;
    ch = '';
    while (!ch) {
      ch = printableAscii().replace(/[[(){?*+|\\$^]/g, '');
    }
    return ch;
  };
  CharacterClass = function (depth) {
    var source;
    if (!depth--)
      return '[]';
    source = listOf([printableAscii])().join('');
    source = source.replace(/\\/g, '\\\\');
    source = source.replace(/]/g, '\\]');
    source = source.replace(/(?:^|[^\\])(?:\\\\)*?(\\u[0-9a-fA-F]{4}|\\x[0-9a-fA-F]{2}|\\.|.)-(\\u[0-9a-fA-F]{4}|\\x[0-9a-fA-F]{2}|\\.|.)/g, function (match, a, b) {
      if (charVal(a) < charVal(b)) {
        return match;
      } else {
        return '' + b + '-' + a;
      }
    });
    return '[' + source + ']';
  };
  Grouping = function (depth) {
    if (!depth--)
      return '()';
    return '(' + RegExpSource(depth) + ')';
  };
  Repetition = function (depth) {
    if (!depth--)
      return '';
    return '' + oneOf([
      Grouping,
      CharacterClass,
      Character
    ])(depth) + oneOf([
      '?',
      '+',
      '*',
      '*?',
      '+?'
    ]);
  };
  Sequence = function () {
    return listOf([Character])().join('');
  };
  RegExpSource = function (depth) {
    if (!depth--)
      return '';
    return oneOf([
      Alternation,
      Grouping,
      CharacterClass,
      Repetition,
      Sequence
    ])(depth);
  };
  genSafeRegExp = function () {
    var e;
    try {
      return new RegExp(RegExpSource(6));
    } catch (e$) {
      e = e$;
      return genSafeRegExp();
    }
  };
  module.exports = function () {
    return {
      type: TYPE,
      value: genSafeRegExp()
    };
  };
}.call(this);
