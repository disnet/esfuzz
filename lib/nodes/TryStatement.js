// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var BlockStatement, cache$, CatchClause, construct, Identifier, maybe, randomBool, TryStatement;
  BlockStatement = require('./BlockStatement');
  Identifier = require('./Identifier');
  cache$ = require('../combinators');
  construct = cache$.construct;
  maybe = cache$.maybe;
  randomBool = require('../random').randomBool;
  CatchClause = function () {
    CatchClause.prototype.type = 'CatchClause';
    CatchClause.prototype.guard = null;
    function CatchClause(depth) {
      this.param = Identifier(depth);
      this.body = BlockStatement(depth);
    }
    return CatchClause;
  }();
  TryStatement = function () {
    TryStatement.prototype.type = TryStatement.name;
    TryStatement.prototype.guardedHandlers = [];
    function TryStatement(depth) {
      --depth;
      this.block = BlockStatement(depth);
      if (randomBool()) {
        this.handler = maybe(construct(CatchClause))(depth);
        this.finalizer = BlockStatement(depth);
      } else {
        this.handler = construct(CatchClause)(depth);
        this.finalizer = maybe(BlockStatement)(depth);
      }
    }
    return TryStatement;
  }();
  module.exports = construct(TryStatement);
}.call(this);
