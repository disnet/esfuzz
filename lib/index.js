// Generated by CoffeeScript 2.0.0-beta5
void function () {
  var escodegen, Program, render, RoundtripFailureError;
  escodegen = require('escodegen');
  Program = require('./nodes/Program');
  RoundtripFailureError = function (super$) {
    extends$(RoundtripFailureError, super$);
    RoundtripFailureError.prototype.name = 'RoundtripFailureError';
    function RoundtripFailureError(param$) {
      this.message = param$;
      Error.call(this);
      if ('function' === typeof Error.captureStackTrace)
        Error.captureStackTrace(this, RoundtripFailureError);
    }
    return RoundtripFailureError;
  }(Error);
  render = function (program) {
    return escodegen.generate(program, { format: escodegen.FORMAT_MINIFY });
  };
  exports.fuzz = function (parsers) {
    var err, program, programAST, roundTrippedProgram, roundTrippedPrograms, targetProgram;
    programAST = Program();
    program = escodegen.generate(programAST, {
      verbatim: 'raw',
      format: escodegen.FORMAT_MINIFY
    });
    try {
      roundTrippedPrograms = function (accum$) {
        var parser;
        for (var i$ = 0, length$ = parsers.length; i$ < length$; ++i$) {
          parser = parsers[i$];
          accum$.push(render(parser.parse(program)));
        }
        return accum$;
      }.call(this, []);
    } catch (e$) {
      err = e$;
      err.ast = programAST;
      err.js = program;
      throw err;
    }
    targetProgram = render(programAST);
    for (var i$ = 0, length$ = roundTrippedPrograms.length; i$ < length$; ++i$) {
      roundTrippedProgram = roundTrippedPrograms[i$];
      if (!(roundTrippedProgram !== targetProgram))
        continue;
      err = new RoundtripFailureError;
      err.ast = programAST;
      err.js = program;
      throw err;
    }
  };
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
  function extends$(child, parent) {
    for (var key in parent)
      if (isOwn$(parent, key))
        child[key] = parent[key];
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }
}.call(this);
