// Generated by CoffeeScript 2.0.0-beta5
void function () {
  var counter, fuzz, knownOpts, nopt, optAliases, options, parsers, recur;
  nopt = require('nopt');
  fuzz = require('./index').fuzz;
  knownOpts = {
    esprima: Boolean,
    acorn: Boolean,
    reflectjs: Boolean,
    reflect: Boolean,
    es6: Boolean,
    iterations: Number
  };
  optAliases = { n: '--iterations' };
  options = nopt(knownOpts, optAliases, process.argv, 2);
  if (null != options.esprima)
    options.esprima;
  else
    options.esprima = true;
  if (null != options.acorn)
    options.acorn;
  else
    options.acorn = true;
  if (null != options.reflect)
    options.reflect;
  else
    options.reflect = 'undefined' !== typeof Reflect && null != Reflect && 'function' === typeof Reflect.parse;
  if (null != options.iterations)
    options.iterations;
  else
    options.iterations = 1 / 0;
  parsers = [];
  if (options.esprima)
    try {
      parsers.push(require('esprima'));
    } catch (e$) {
    }
  if (options.acorn)
    try {
      parsers.push(require('acorn'));
    } catch (e$1) {
    }
  if (options.reflectjs)
    try {
      parsers.push(require('reflect'));
    } catch (e$2) {
    }
  if (options.reflect)
    try {
      parsers.push(Reflect);
    } catch (e$3) {
    }
  if ('function' === typeof process.on)
    process.on('SIGINT', function () {
      process.stdout.write('  \n');
      return process.exit(0);
    });
  counter = 0;
  (recur = function () {
    var ast, cache$, err, js;
    ++counter;
    try {
      fuzz(parsers);
    } catch (e$4) {
      err = e$4;
      cache$ = err;
      ast = cache$.ast;
      js = cache$.js;
      console.error('\n\n' + err.stack + '\n\n' + js + '\n\n' + JSON.stringify(ast));
      process.exit(1);
    }
    process.stdout.write('\b\b\b\b\b\b\b\b\b\b\b\b\b\b' + counter);
    if (counter < options.iterations) {
      setImmediate(recur);
    } else {
      process.stdout.write('\n');
    }
  })();
}.call(this);
